// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SP18.PF.Web.Data;
using System;

namespace SP18.PF.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20180206191831_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SP18.P3.Core.Features.Events.Event", b =>
                {
                    b.Property<int>("VenueId");

                    b.Property<int>("TourId");

                    b.Property<DateTimeOffset>("EventEnd");

                    b.Property<DateTimeOffset>("EventStart");

                    b.Property<decimal>("TicketPrice");

                    b.HasKey("VenueId", "TourId");

                    b.HasIndex("TourId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Tickets.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventTourId")
                        .IsRequired();

                    b.Property<int?>("EventVenueId")
                        .IsRequired();

                    b.Property<decimal>("PurchasePrice");

                    b.Property<int?>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("EventVenueId", "EventTourId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Tours.Tour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Tour");
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Venues.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Events.Event", b =>
                {
                    b.HasOne("SP18.P3.Core.Features.Tours.Tour", "Tour")
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SP18.P3.Core.Features.Venues.Venue", "Venue")
                        .WithMany()
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Tickets.Ticket", b =>
                {
                    b.HasOne("SP18.P3.Core.Features.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SP18.P3.Core.Features.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventVenueId", "EventTourId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Users.User", b =>
                {
                    b.OwnsOne("SP18.P3.Core.Features.Shared.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<string>("AddressLine1")
                                .HasMaxLength(64);

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(64);

                            b1.Property<string>("City")
                                .HasMaxLength(64);

                            b1.Property<string>("State")
                                .HasMaxLength(2);

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(5);

                            b1.ToTable("User");

                            b1.HasOne("SP18.P3.Core.Features.Users.User")
                                .WithOne("BillingAddress")
                                .HasForeignKey("SP18.P3.Core.Features.Shared.Address", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SP18.P3.Core.Features.Venues.Venue", b =>
                {
                    b.OwnsOne("SP18.P3.Core.Features.Shared.Address", "PhysicalAddress", b1 =>
                        {
                            b1.Property<int?>("VenueId");

                            b1.Property<string>("AddressLine1")
                                .HasMaxLength(64);

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(64);

                            b1.Property<string>("City")
                                .HasMaxLength(64);

                            b1.Property<string>("State")
                                .HasMaxLength(2);

                            b1.Property<string>("ZipCode")
                                .HasMaxLength(5);

                            b1.ToTable("Venue");

                            b1.HasOne("SP18.P3.Core.Features.Venues.Venue")
                                .WithOne("PhysicalAddress")
                                .HasForeignKey("SP18.P3.Core.Features.Shared.Address", "VenueId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
